package api

import (
	"fmt"
	"net/http"
	"strings"
	"time"

	"loading_time/internal/app/ds"
	"loading_time/internal/app/repository"
	"loading_time/internal/app/utils"

	"github.com/gin-gonic/gin"
	"github.com/golang-jwt/jwt/v4"
	"github.com/sirupsen/logrus"
	"golang.org/x/crypto/bcrypt"
)

// =========================================================
// üîê JWT + —Ä–æ–ª–∏
// =========================================================

var jwtKey = []byte("super_secret_key")

type Claims struct {
	UserID int    `json:"user_id"`
	Role   string `json:"role"`
	jwt.RegisteredClaims
}

// Middleware –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ –∏ —Ä–æ–ª–∏
func (h *UserHandler) AuthMiddleware(allowedRoles ...string) gin.HandlerFunc {
	return func(c *gin.Context) {
		tokenStr := c.GetHeader("Authorization")
		if tokenStr == "" {
			c.JSON(http.StatusUnauthorized, gin.H{"error": "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"})
			c.Abort()
			return
		}

		tokenStr = strings.TrimPrefix(tokenStr, "Bearer ")
		claims := &Claims{}
		token, err := jwt.ParseWithClaims(tokenStr, claims, func(token *jwt.Token) (interface{}, error) {
			return jwtKey, nil
		})
		if err != nil || !token.Valid {
			c.JSON(http.StatusUnauthorized, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω"})
			c.Abort()
			return
		}

		// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏
		allowed := false
		for _, role := range allowedRoles {
			if claims.Role == role {
				allowed = true
				break
			}
		}
		if !allowed {
			c.JSON(http.StatusForbidden, gin.H{"error": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤"})
			c.Abort()
			return
		}

		c.Set("user_id", claims.UserID)
		c.Set("role", claims.Role)
		c.Next()
	}
}

// =========================================================
// üë§ USERS (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è / –≤—Ö–æ–¥ / –ø—Ä–æ—Ñ–∏–ª—å)
// =========================================================

type UserHandler struct {
	Repository *repository.Repository
}

// @Summary      –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// @Description  –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// @Tags         users
// @Accept       json
// @Produce      json
// @Param        user  body      ds.User  true  "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
// @Success      201   {object}  ds.User
// @Failure      400   {object}  map[string]string
// @Failure      500   {object}  map[string]string
// @Router       /api/users/register [post]
func (h *UserHandler) RegisterUserAPI(c *gin.Context) {
	var user ds.User
	if err := c.ShouldBindJSON(&user); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}
	if user.Role == "" {
		user.Role = "creator"
	}

	// üîë –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å –≤—Ä—É—á–Ω—É—é
	hashedPassword, err := bcrypt.GenerateFromPassword([]byte(user.Password), bcrypt.DefaultCost)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è"})
		return
	}
	user.Password = string(hashedPassword)

	if err := h.Repository.CreateUser(&user); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	user.Password = "" // –Ω–µ –æ—Ç–¥–∞—ë–º –ø–∞—Ä–æ–ª—å
	c.JSON(http.StatusCreated, user)
}

// @Summary      –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// @Description  –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –≤—ã–¥–∞—á–∞ JWT
// @Tags         users
// @Accept       json
// @Produce      json
// @Param        credentials  body      object{login=string,password=string}  true  "–õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å"
// @Success      200  {object}  map[string]interface{}
// @Failure      401  {object}  map[string]string
// @Router       /api/users/login [post]
func (h *UserHandler) LoginUserAPI(c *gin.Context) {
	var cred struct {
		Login    string `json:"login"`
		Password string `json:"password"`
	}
	if err := c.ShouldBindJSON(&cred); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	user, err := h.Repository.GetUserByLogin(cred.Login)
	if err != nil {
		logrus.Infof("LoginUserAPI: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—à–∏–±–∫–∞: %v", cred.Login, err)
		c.JSON(http.StatusUnauthorized, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"})
		return
	}

	// –õ–æ–≥ –ø–µ—Ä–µ–¥ bcrypt
	logrus.Infof("LoginUserAPI DEBUG: RAW='%s' LEN=%d | HASH='%s' LEN=%d",
		cred.Password, len(cred.Password),
		user.Password, len(user.Password))
	logrus.Infof("LoginUserAPI: –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s —Å —Ö–µ—à–µ–º %s, –≤–≤–µ–¥—ë–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å: %s", user.Login, user.Password, cred.Password)
	// debug: –ø–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ —Ä–µ–∞–ª—å–Ω–æ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º
	fmt.Printf("RAW: '%s' | HASH: '%s'\n", cred.Password, user.Password)

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
	if err := bcrypt.CompareHashAndPassword([]byte(user.Password), []byte(cred.Password)); err != nil {
		logrus.Infof("LoginUserAPI: –ø–∞—Ä–æ–ª—å –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", cred.Login)
		c.JSON(http.StatusUnauthorized, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"})
		return
	}

	// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT
	tokenString, err := utils.GenerateJWT(user.UserID, user.Role)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞"})
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –≤ Redis –Ω–∞ 2 —á–∞—Å–∞
	_ = utils.SetSession(tokenString, user.UserID, user.Role, 2*time.Hour)

	c.JSON(http.StatusOK, gin.H{
		"message": "–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥",
		"token":   tokenString,
		"role":    user.Role,
	})
}

// @Summary      –í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// @Description  –£–¥–∞–ª–µ–Ω–∏–µ JWT –∏ —Å–µ—Å—Å–∏–∏
// @Tags         users
// @Produce      json
// @Success      200  {object}  map[string]string
// @Router       /api/users/logout [post]
func (h *UserHandler) LogoutUserAPI(c *gin.Context) {
	token, _ := c.Cookie("jwt")
	if token != "" {
		_ = utils.DeleteSession(token)
	}

	c.SetCookie("jwt", "", -1, "/", "", false, true)
	c.JSON(http.StatusOK, gin.H{"message": "Logout successful"})
}

// @Summary      –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// @Description  –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// @Tags         users
// @Produce      json
// @Success      200  {object}  ds.User
// @Failure      404  {object}  map[string]string
// @Security     ApiKeyAuth
// @Router       /api/users/profile [get]
func (h *UserHandler) GetUserProfileAPI(c *gin.Context) {
	userID := c.GetInt("user_id")
	user, err := h.Repository.GetUserByID(userID)
	if err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"})
		return
	}
	user.Password = "" // –Ω–µ –æ—Ç–¥–∞—ë–º –ø–∞—Ä–æ–ª—å
	c.JSON(http.StatusOK, user)
}

// UpdateUserProfileAPI

// @Summary      –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// @Description  –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// @Tags         users
// @Accept       json
// @Produce      json
// @Param        user  body      ds.User  true  "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
// @Success      200  {object}  map[string]string
// @Failure      400  {object}  map[string]string
// @Failure      401  {object}  map[string]string
// @Failure      500  {object}  map[string]string
// @Security     ApiKeyAuth
// @Router       /api/users/profile [put]
func (h *UserHandler) UpdateUserProfileAPI(c *gin.Context) {
	uid, exists := c.Get("user_id")
	if !exists {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "Unauthorized"})
		return
	}
	var user ds.User
	if err := c.ShouldBindJSON(&user); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}
	switch v := uid.(type) {
	case float64:
		user.UserID = int(v)
	case int:
		user.UserID = v
	default:
		c.JSON(http.StatusInternalServerError, gin.H{"error": "invalid user id type"})
		return
	}
	if err := h.Repository.UpdateUser(user); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}
	c.JSON(http.StatusOK, gin.H{"message": "Profile updated"})
}
